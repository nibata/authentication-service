"""init database

Revision ID: 5036a7be62d5
Revises: 
Create Date: 2024-03-24 03:19:52.601720

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from api.models import Password
from api.configs.settings import USER_ADMIN, PASS_ADMIN, ADMIN_EMAIL


# revision identifiers, used by Alembic.
revision = '5036a7be62d5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA IF NOT EXISTS "authentication"')
    group_table = op.create_table('group',
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    schema='authentication'
    )

    user_table = op.create_table('user',
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='authentication'
    )
    password_table=op.create_table('password',
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expiration_date', sa.Date(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=120), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['authentication.user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='authentication'
    )
    user_group_link_table = op.create_table('user_group_link',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['authentication.group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['authentication.user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'group_id'),
    sa.UniqueConstraint('user_id', 'group_id', name='unique_user_group_constraint'),
    schema='authentication'
    )
    # ### end Alembic commands ###

    roles = [{"code": "ADMINISTRATOR", "description": "Administrator privileges role"},
             {"code": "SELECT", "description": "Basic select role"},
             {"code": "INSERT", "description": "Basic insert role"},
             {"code": "DEFAULT", "description": "Default role"}]

    user = [{"email": ADMIN_EMAIL, "full_name": USER_ADMIN, "is_active": True}]

    op.bulk_insert(group_table, roles)
    op.bulk_insert(user_table, user)
    op.execute(f"""
                INSERT INTO "authentication"."user_group_link"("user_id", "group_id")
                VALUES ((SELECT "id" FROM "authentication"."user" WHERE "email"='{ADMIN_EMAIL}'),
                        (SELECT "id" FROM "authentication"."group" WHERE "code"='ADMINISTRATOR')),

                        ((SELECT "id" FROM "authentication"."user" WHERE "email"='{ADMIN_EMAIL}'),
                        (SELECT "id" FROM "authentication"."group" WHERE "code"='SELECT')),

                        ((SELECT "id" FROM "authentication"."user" WHERE "email"='{ADMIN_EMAIL}'),
                        (SELECT "id" FROM "authentication"."group" WHERE "code"='INSERT')),

                        ((SELECT "id" FROM "authentication"."user" WHERE "email"='{ADMIN_EMAIL}'),
                        (SELECT "id" FROM "authentication"."group" WHERE "code"='DEFAULT'))
                    """)

    hashed_password = Password.set_password(PASS_ADMIN)

    op.execute(f"""
                INSERT INTO "authentication"."password" ("user_id", "is_active", "hashed_password")
                VALUES ((SELECT "id" FROM "authentication"."user" WHERE "email"='{ADMIN_EMAIL}'),
                        true,
                        '{hashed_password}')
                """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_group_link', schema='authentication')
    op.drop_table('password', schema='authentication')
    op.drop_table('user', schema='authentication')
    op.drop_table('group', schema='authentication')
    # ### end Alembic commands ###
    op.execute('DROP SCHEMA IF EXISTS "authentication"')
